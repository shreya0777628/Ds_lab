#include <iostream>
#include <vector>
using namespace std;

struct Triplet {
    int row, col, val;
};

class SparseMatrix {
public:
    int rows, cols;
    vector<Triplet> data;

    SparseMatrix(int r, int c) : rows(r), cols(c) {}

    void add(int r, int c, int v) {
        if (v != 0) data.push_back({r, c, v});
    }

    void print() {
        for (auto &t : data)
            cout << t.row << " " << t.col << " " << t.val << "\n";
    }

    SparseMatrix transpose() {
        SparseMatrix t(cols, rows);
        for (int j = 0; j < cols; ++j)
            for (auto &e : data)
                if (e.col == j) t.data.push_back({e.col, e.row, e.val});
        return t;
    }

    SparseMatrix addMatrix(SparseMatrix &b) {
        if (rows != b.rows || cols != b.cols) return SparseMatrix(0, 0);
        SparseMatrix sum(rows, cols);
        int i = 0, j = 0;
        while (i < data.size() || j < b.data.size()) {
            if (j == b.data.size() || (i < data.size() && 
                (data[i].row < b.data[j].row || 
                (data[i].row == b.data[j].row && data[i].col < b.data[j].col))))
                sum.data.push_back(data[i++]);
            else if (i == data.size() || (b.data[j].row < data[i].row || 
                (b.data[j].row == data[i].row && b.data[j].col < data[i].col)))
                sum.data.push_back(b.data[j++]);
            else {
                int v = data[i].val + b.data[j].val;
                if (v) sum.data.push_back({data[i].row, data[i].col, v});
                i++; j++;
            }
        }
        return sum;
    }

    SparseMatrix multiply(SparseMatrix &b) {
        if (cols != b.rows) return SparseMatrix(0, 0);
        SparseMatrix res(rows, b.cols);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < b.cols; j++) {
                int sum = 0;
                for (auto &a : data)
                    if (a.row == i)
                        for (auto &c : b.data)
                            if (c.row == a.col && c.col == j)
                                sum += a.val * c.val;
                if (sum) res.add(i, j, sum);
            }
        }
        return res;
    }
};

int main() {
    SparseMatrix A(3,3), B(3,3);
    A.add(0,0,1); A.add(0,2,2); A.add(1,1,3); A.add(2,0,4); A.add(2,2,5);
    B.add(0,0,6); B.add(0,1,7); B.add(1,1,8); B.add(2,2,9);

    cout << "Transpose of A:\n"; A.transpose().print();
    cout << "\nA + B:\n"; A.addMatrix(B).print();
    cout << "\nA * B:\n"; A.multiply(B).print();
    return 0;
}
